
services:
  app:
    image: coinbase-app
    build:
      context: .
      dockerfile: cmd/app/Dockerfile
    environment:
      # logger
      LOGGER_CALLER: 0
      LOGGER_STACKTRACE: 1
      LOGGER_LEVEL: debug
      # database
      DB_HOST: mysql:3306
      DB_USER: root
      DB_PASSWORD: root
      DB_BASE: test
      # exchange
      EXCHANGE_URL: wss://ws-feed.exchange.coinbase.com
      EXCHANGE_ORIGIN: https://coinbase.com
      EXCHANGE_PROTOCOL:
      EXCHANGE_SYMBOLS: ETH-USD, BTC-USD
      EXCHANGE_CHANNELS: full
      # aws
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - local
    env_file:
      - env.list

  mysql:
    image: mysql
    environment:
      # MYSQL_USER: test_mysql
      # MYSQL_PASSWORD: root
      MYSQL_DATABASE: test
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: root
    restart: unless-stopped
    # command: --default-authentication-plugin=mysql_native_password
    ports:
      # Be careful! It's public port only for test. Remove this block if run in production.
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysql", "-uroot", "-proot", "test", "-e", "SHOW TABLES LIKE 'orders';"]
      interval: 3s
      timeout: 5s
      retries: 5
    volumes:
      - mysql-db:/var/lib/mysql
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/1.sql
    networks:
      - local
  
  analysis_app:
    image: analysis-app
    build:
      context: .
      dockerfile: cmd/analysis/Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - local
    env_file:
      - env.list
    environment:
      DB_HOST: mysql:3306
      DB_USER: root
      DB_PASSWORD: root
      DB_BASE: test
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
    ports:
      - "8090:8090"

networks:
  local:
    driver: bridge

volumes:
  mysql-db: